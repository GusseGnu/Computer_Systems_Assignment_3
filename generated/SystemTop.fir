;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module DataMemory_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    inst dataMemory of DataMemory_1 @[Accelerator.scala 17:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Accelerator.scala 21:25]
    reg addressReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Accelerator.scala 24:27]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 25:24]
    reg center : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 28:23]
    reg left : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 29:21]
    reg right : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 30:22]
    reg up : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 31:19]
    reg down : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Accelerator.scala 32:21]
    dataMemory.io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 35:29]
    dataMemory.io.address <= UInt<16>("h00") @[Accelerator.scala 36:25]
    dataMemory.io.dataWrite <= dataReg @[Accelerator.scala 37:27]
    io.done <= UInt<1>("h00") @[Accelerator.scala 38:11]
    node _T = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 43:22]
        stateReg <= UInt<3>("h01") @[Accelerator.scala 44:18]
        addressReg <= UInt<16>("h00") @[Accelerator.scala 45:20]
        skip @[Accelerator.scala 43:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        dataMemory.io.address <= addressReg @[Accelerator.scala 50:29]
        center <= addressReg @[Accelerator.scala 51:14]
        stateReg <= UInt<3>("h02") @[Accelerator.scala 52:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = rem(addressReg, UInt<5>("h013")) @[Accelerator.scala 57:23]
          node _T_4 = eq(_T_3, UInt<1>("h00")) @[Accelerator.scala 57:30]
          when _T_4 : @[Accelerator.scala 57:38]
            dataMemory.io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 58:33]
            stateReg <= UInt<3>("h06") @[Accelerator.scala 59:18]
            skip @[Accelerator.scala 57:38]
          node _T_5 = rem(addressReg, UInt<5>("h014")) @[Accelerator.scala 61:23]
          node _T_6 = eq(_T_5, UInt<1>("h00")) @[Accelerator.scala 61:30]
          when _T_6 : @[Accelerator.scala 61:38]
            dataMemory.io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 62:33]
            stateReg <= UInt<3>("h06") @[Accelerator.scala 63:18]
            skip @[Accelerator.scala 61:38]
          node _T_7 = lt(addressReg, UInt<5>("h014")) @[Accelerator.scala 65:23]
          node _T_8 = gt(addressReg, UInt<9>("h017b")) @[Accelerator.scala 65:43]
          node _T_9 = and(_T_7, _T_8) @[Accelerator.scala 65:30]
          when _T_9 : @[Accelerator.scala 65:51]
            dataMemory.io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 66:33]
            stateReg <= UInt<3>("h06") @[Accelerator.scala 67:18]
            skip @[Accelerator.scala 65:51]
          node _T_10 = bits(dataMemory.io.dataRead, 7, 0) @[Accelerator.scala 70:34]
          node _T_11 = eq(_T_10, UInt<1>("h00")) @[Accelerator.scala 70:40]
          when _T_11 : @[Accelerator.scala 70:48]
            dataMemory.io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 71:33]
            stateReg <= UInt<3>("h06") @[Accelerator.scala 72:18]
            skip @[Accelerator.scala 70:48]
          stateReg <= UInt<3>("h03") @[Accelerator.scala 75:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_12 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            node _T_13 = sub(center, UInt<1>("h01")) @[Accelerator.scala 80:39]
            node _T_14 = tail(_T_13, 1) @[Accelerator.scala 80:39]
            dataMemory.io.address <= _T_14 @[Accelerator.scala 80:29]
            node _T_15 = bits(dataMemory.io.dataRead, 7, 0) @[Accelerator.scala 81:37]
            left <= _T_15 @[Accelerator.scala 81:12]
            node _T_16 = add(center, UInt<1>("h01")) @[Accelerator.scala 83:39]
            node _T_17 = tail(_T_16, 1) @[Accelerator.scala 83:39]
            dataMemory.io.address <= _T_17 @[Accelerator.scala 83:29]
            node _T_18 = bits(dataMemory.io.dataRead, 7, 0) @[Accelerator.scala 84:38]
            right <= _T_18 @[Accelerator.scala 84:13]
            node _T_19 = sub(center, UInt<5>("h014")) @[Accelerator.scala 86:39]
            node _T_20 = tail(_T_19, 1) @[Accelerator.scala 86:39]
            dataMemory.io.address <= _T_20 @[Accelerator.scala 86:29]
            node _T_21 = bits(dataMemory.io.dataRead, 7, 0) @[Accelerator.scala 87:35]
            up <= _T_21 @[Accelerator.scala 87:10]
            node _T_22 = add(center, UInt<5>("h014")) @[Accelerator.scala 89:39]
            node _T_23 = tail(_T_22, 1) @[Accelerator.scala 89:39]
            dataMemory.io.address <= _T_23 @[Accelerator.scala 89:29]
            node _T_24 = bits(dataMemory.io.dataRead, 7, 0) @[Accelerator.scala 90:37]
            down <= _T_24 @[Accelerator.scala 90:12]
            node _T_25 = eq(left, UInt<8>("h0ff")) @[Accelerator.scala 93:17]
            node _T_26 = eq(right, UInt<8>("h0ff")) @[Accelerator.scala 93:35]
            node _T_27 = and(_T_25, _T_26) @[Accelerator.scala 93:27]
            node _T_28 = eq(up, UInt<8>("h0ff")) @[Accelerator.scala 93:50]
            node _T_29 = and(_T_27, _T_28) @[Accelerator.scala 93:45]
            node _T_30 = eq(down, UInt<8>("h0ff")) @[Accelerator.scala 93:67]
            node _T_31 = and(_T_29, _T_30) @[Accelerator.scala 93:60]
            when _T_31 : @[Accelerator.scala 93:77]
              dataMemory.io.dataWrite <= UInt<8>("h0ff") @[Accelerator.scala 94:33]
              stateReg <= UInt<3>("h06") @[Accelerator.scala 95:18]
              skip @[Accelerator.scala 93:77]
            else : @[Accelerator.scala 96:19]
              dataMemory.io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 97:33]
              stateReg <= UInt<3>("h06") @[Accelerator.scala 98:18]
              skip @[Accelerator.scala 96:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_32 = eq(UInt<3>("h06"), stateReg) @[Conditional.scala 37:30]
            when _T_32 : @[Conditional.scala 39:67]
              node _T_33 = add(addressReg, UInt<16>("h0190")) @[Accelerator.scala 103:43]
              node _T_34 = tail(_T_33, 1) @[Accelerator.scala 103:43]
              dataMemory.io.address <= _T_34 @[Accelerator.scala 103:29]
              dataMemory.io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 104:33]
              node _T_35 = add(addressReg, UInt<16>("h01")) @[Accelerator.scala 106:32]
              node _T_36 = tail(_T_35, 1) @[Accelerator.scala 106:32]
              addressReg <= _T_36 @[Accelerator.scala 106:18]
              node _T_37 = eq(addressReg, UInt<16>("h018f")) @[Accelerator.scala 107:23]
              when _T_37 : @[Accelerator.scala 107:40]
                stateReg <= UInt<3>("h07") @[Accelerator.scala 108:18]
                skip @[Accelerator.scala 107:40]
              else : @[Accelerator.scala 109:19]
                stateReg <= UInt<3>("h01") @[Accelerator.scala 110:18]
                skip @[Accelerator.scala 109:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_38 = eq(UInt<3>("h07"), stateReg) @[Conditional.scala 37:30]
              when _T_38 : @[Conditional.scala 39:67]
                io.done <= UInt<1>("h01") @[Accelerator.scala 115:15]
                stateReg <= UInt<3>("h07") @[Accelerator.scala 116:16]
                skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
